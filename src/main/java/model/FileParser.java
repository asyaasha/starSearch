package model;

import java.io.*;
import java.util.*;


/**
 * Created by Dennis Eddington
 *
 * File Parser class that goes through the requested file and parses all pertinent information to pass to the model.Simulation
 */

class FileParser {

    private HashMap<String, String[]> instructionSet;
    private String filePath;

    /**
     * Constructor for the model.FileParser object
     *
     * @param filePath  FilePath of file to parse
     */
    public FileParser(String filePath) {
        this.instructionSet = new HashMap<>();
        this.filePath = filePath;
    }

    /**
     * Generates instruction set from given filepath
     */
    public void generateInstructions() {

        List<String> data = new ArrayList<>();
        String basePath = new File("").getAbsolutePath() + File.separator;

        try {
            BufferedReader fileReader = new BufferedReader(new FileReader(this.filePath));
            String row;
            while ((row = fileReader.readLine()) != null) {
                data.add(row);
            }
            fileReader.close();

			/*
	        Parse instructions in some predefined order... Here is that order:

			5
			4
			3
			1,2,north
			0,1,northeast
			3,1,west
			3
			1,1
			1,3
			3,0
			40


			The space region is 5 squares in width (X coordinate) and 4 squares in length (Y coordinate). There
			are 3 drones. The first drone begins at coordinates (1,2) pointing in the North direction. The
			second drone begins at coordinates (0,1) pointing in the Northeast direction. And the third drone
			begins at coordinates (3,1) pointing in a Westerly direction. There are 3 suns located at (1,1),
			(1,3) and (3,0). Note that, of the total 20 space region squares, 3 are suns, and of the remaining
			17 squares that 3 are already empty because the drones automatically explore any square on which
			they are located, including their initial squares. Finally, the simulation run will not last more than 40
			fully completed turns

	        */

            String[] dimensions = new String[]{data.get(0), data.get(1)};
            instructionSet.put("Dimensions", dimensions);

            int nextValidLine = 2;

            if (Integer.parseInt(data.get(nextValidLine)) > 0) {
                //We have some number of drones
                //model.Drone Instruction Container
                String[] droneLocations = new String[Integer.parseInt(data.get(nextValidLine))];

                for (int i = 0; i < droneLocations.length; i++) {
                    int droneLocationLine = nextValidLine + i + 1; // Add one to get to next line
                    droneLocations[i] = data.get(droneLocationLine);
                }
                instructionSet.put("DroneLocations", droneLocations);
            }

            if (Integer.parseInt(data.get(nextValidLine)) == 0) {
                nextValidLine = 3;
            } else {
                nextValidLine = nextValidLine + Integer.parseInt(data.get(nextValidLine)) + 1;
            }

            if (Integer.parseInt(data.get(nextValidLine)) > 0) {
                //We have some number of obstacles(ONLY SUN FOR THIS PHASE OF PROJECT)
                //model.Obstacle Instruction Container
                String[] obstacleLocations = new String[Integer.parseInt(data.get(nextValidLine))];

                for (int i = 0; i < obstacleLocations.length; i++) {
                    int obstacleLocationLine = nextValidLine + i + 1; // Add one to get to next line
                    obstacleLocations[i] = data.get(obstacleLocationLine);
                }
                instructionSet.put("ObstacleLocations", obstacleLocations);
            }
            data.removeAll(Arrays.asList(""));
            instructionSet.put("MaxTurns", new String[]{data.get(data.size() - 1)});
        } catch (IOException exception) {
            System.out.println("IOException has occurred.");
            this.requestNewFilePath();
        }
    }

    /**
     * Give a new FilePath
     */
    public void requestNewFilePath() {
        System.out.println("Please insert full proper file path for document containing simulation setup parameters:");
        Scanner scan = new Scanner(System.in);
        this.filePath = scan.nextLine();
        this.generateInstructions();
    }

    /**
     * Returns instruction set generated by model.FileParser
     * @return
     */
    public HashMap<String, String[]> getInstructionSet() {
        return this.instructionSet;
    }

    /**
     * Write all information to CSV
     * @param logInfo
     */
    public void writeToFile(ArrayList<String> logInfo) {
        /*try {
            BufferedWriter writer = new BufferedWriter(new FileWriter(filePath.substring(0, filePath.length() - 4) + "_results.csv"));
            for (String line:logInfo) {
                writer.write(line);
                writer.write("\n");
            }
            writer.close();
        } catch (Exception e) {
            System.out.println("Something went horribly wrong :).");
        }*/
        for (String line:logInfo) {
            System.out.println(line);
        }
    }
}